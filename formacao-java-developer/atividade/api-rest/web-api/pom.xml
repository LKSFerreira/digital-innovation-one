<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.0</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>dio</groupId>
	<artifactId>web-api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>web-api</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>

		<!-- A dependência `spring-boot-starter-data-jpa` é uma parte do Spring Boot que
		simplifica significativamente o desenvolvimento de aplicações Spring. Ela fornece as
		seguintes funcionalidades:
		
		- **Spring Data JPA**: Facilita a criação de repositórios
		baseados em JPA. Isso inclui a integração com Hibernate, que é uma das implementações mais
		populares da especificação JPA.
		
		- **Spring Transaction**: Fornece abstrações para trabalhar
		com transações de banco de dados de maneira declarativa.
		
		- **Spring JDBC**: Para quando você
		precisa de um controle mais fino sobre suas operações de banco de dados.
		
		Em resumo, `spring-boot-starter-data-jpa` é uma dependência inicializadora que agrega várias
		dependências relacionadas ao JPA para facilitar o acesso ao banco de dados em aplicações
		Spring. Ela é muito útil para simplificar o desenvolvimento de aplicações que necessitam de
		persistência de dados. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- A dependência `spring-boot-starter-web` é
		uma parte do Spring Boot que simplifica o desenvolvimento de aplicações web. Ela fornece as
		seguintes funcionalidades:
		
		- **Spring MVC**: Um framework para construir aplicações web e
		serviços RESTful, com configuração padrão para o Jackson (biblioteca para trabalhar com
		JSON), GSON (outra biblioteca para trabalhar com JSON), Message converters, etc. 
		
		- **Tomcat**: Um servidor de aplicações web embutido para servir suas aplicações.
		
		- **Spring WebFlux**: Para aplicações reativas não bloqueantes
		
		Emresumo, `spring-boot-starter-web` é
		uma dependência inicializadora que agrega várias dependências relacionadas à construção de
		aplicações web. Ela é muito útil para simplificar o desenvolvimento de aplicações web e
		serviços RESTful em Spring. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- A dependência `h2` é uma parte do H2
		Database Engine, que é um banco de dados relacional escrito em Java. Ele pode ser
		incorporado em aplicações Java ou executado no modo cliente-servidor. As principais
		funcionalidades são:
		
		- **Rápido**: É um banco de dados em memória, o que significa que os
		dados não são armazenados no disco rígido, mas sim na memória RAM. Isso torna o H2
		extremamente rápido. 

		- **Leve**: O H2 é muito leve em termos de recursos necessários, o que
		o torna uma excelente escolha para testes ou para cenários onde um banco de dados completo
		não é necessário.
		
		- **Modo incorporado e modo servidor**: O H2 pode ser usado de duas
		maneiras - incorporado em sua aplicação Java ou como um servidor de banco de dados
		independente.
		
		O escopo `runtime` indica que a dependência não é necessária para compilar o
		código, mas é para execução. Portanto, o H2 estará disponível durante a execução e os
		testes, mas não durante a compilação, o que é comum durante o desenvolvimento e teste de
		aplicações Spring Boot. -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- A dependência `lombok` é uma biblioteca Java que se
		conecta automaticamente ao seu editor e ferramentas de construção, introduzindo uma série de
		anotações úteis para reduzir o código boilerplate em aplicações Java. As principais
		funcionalidades são:
		
		- **@Data**: Gera getters para todos os campos, um setter útil para
		cada campo não final e não estático, e um construtor adequado. - **@Slf4j**: Cria um campo
		de log Slf4j.
		
		- **@Cleanup**: Garante que um determinado recurso é automaticamente limpo
		antes do método retorna.
		
		- **@NonNull**: Ajuda a evitar exceções NullPointerException.
		- **@Synchronized**: Um bloqueio seguro para métodos e blocos de código.
		
		O elemento `optional` quando definido como `true`, indica que a dependência não é necessária para
		os que usam essa biblioteca ou projeto. Portanto, Lombok é uma dependência opcional neste
		caso. Isso é útil quando você quer usar certas funcionalidades apenas em certos casos. -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Ela é usada para adicionar dependências
		necessárias para testar aplicações Spring Boot. A tag <scope>test</scope> indica que esta
		dependência não é necessária para a execução normal da aplicação, mas é necessária apenas
		para compilar e executar testes. Em outras palavras, as bibliotecas desta dependência não
		serão incluídas no aplicativo final, mas serão disponibilizadas durante a fase de teste
		durante o ciclo de vida do Maven.  -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>